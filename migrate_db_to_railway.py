"""
Script de migration automatique de la base de donn√©es locale vers Railway
Copie les donn√©es de Tailscale (100.73.238.42) vers Railway
"""

import os
import subprocess
import sys
from pathlib import Path

def run_command(command, description):
    """Ex√©cute une commande et affiche le r√©sultat"""
    print(f"\nüîÑ {description}...")
    try:
        result = subprocess.run(
            command,
            shell=True,
            capture_output=True,
            text=True,
            check=True
        )
        print(f"‚úÖ {description} - Succ√®s")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erreur : {e.stderr}")
        return False

def export_databases():
    """Exporte les 3 bases de donn√©es locales"""
    print("\n" + "="*60)
    print("üì¶ EXPORT DES BASES DE DONN√âES LOCALES")
    print("="*60)
    
    databases = ['simulation', 'economic', 'analysis']
    export_dir = Path('db_exports')
    export_dir.mkdir(exist_ok=True)
    
    print(f"\nüìÅ Dossier d'export : {export_dir.absolute()}")
    
    success_count = 0
    for db in databases:
        output_file = export_dir / f"{db}.sql"
        command = f'pg_dump -h 100.73.238.42 -U postgres -d {db} --no-owner --no-privileges -f "{output_file}"'
        
        if run_command(command, f"Export de '{db}'"):
            file_size = output_file.stat().st_size / 1024  # KB
            print(f"   üìÑ Fichier : {output_file.name} ({file_size:.1f} KB)")
            success_count += 1
    
    if success_count == len(databases):
        print(f"\nüéâ Toutes les bases export√©es avec succ√®s !")
        return True
    else:
        print(f"\n‚ö†Ô∏è {len(databases) - success_count} base(s) non export√©e(s)")
        return False

def import_to_railway(railway_url):
    """Importe les donn√©es vers Railway"""
    print("\n" + "="*60)
    print("üöÄ IMPORT VERS RAILWAY")
    print("="*60)
    
    export_dir = Path('db_exports')
    databases = ['simulation', 'economic', 'analysis']
    
    success_count = 0
    for db in databases:
        sql_file = export_dir / f"{db}.sql"
        if not sql_file.exists():
            print(f"‚ùå Fichier {sql_file} introuvable")
            continue
        
        command = f'psql "{railway_url}" < "{sql_file}"'
        
        if run_command(command, f"Import de '{db}'"):
            success_count += 1
    
    if success_count == len(databases):
        print(f"\nüéâ Migration compl√®te r√©ussie !")
        print(f"\n‚úÖ Votre application Railway peut maintenant acc√©der aux donn√©es")
        return True
    else:
        print(f"\n‚ö†Ô∏è {len(databases) - success_count} base(s) non import√©e(s)")
        return False

def main():
    """Fonction principale"""
    print("""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë     MIGRATION BASE DE DONN√âES - LOCAL ‚Üí RAILWAY           ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
""")
    
    print("Ce script va :")
    print("  1Ô∏è‚É£  Exporter vos 3 bases de donn√©es locales (Tailscale)")
    print("  2Ô∏è‚É£  Les importer vers votre base Railway")
    print()
    
    # V√©rifier que pg_dump et psql sont install√©s
    print("üîç V√©rification des outils PostgreSQL...")
    
    try:
        subprocess.run('pg_dump --version', shell=True, capture_output=True, check=True)
        subprocess.run('psql --version', shell=True, capture_output=True, check=True)
        print("‚úÖ PostgreSQL client install√©")
    except:
        print("‚ùå ERREUR : PostgreSQL client non install√©")
        print("\nüì• Installation requise :")
        print("   T√©l√©chargez : https://www.postgresql.org/download/windows/")
        print("   Ou installez via : winget install PostgreSQL.PostgreSQL")
        return
    
    # √âtape 1 : Export
    print("\n" + "-"*60)
    input("Appuyez sur ENTR√âE pour d√©marrer l'export...")
    
    if not export_databases():
        print("\n‚ùå Export √©chou√©. V√©rifiez que :")
        print("   - Tailscale est actif")
        print("   - La DB est accessible sur 100.73.238.42")
        print("   - Le mot de passe est correct (4845)")
        return
    
    # √âtape 2 : Import
    print("\n" + "-"*60)
    print("\nüìù Configuration Railway")
    print("\nDans Railway, allez dans votre service PostgreSQL et copiez DATABASE_URL")
    print("Format : postgresql://postgres:PASSWORD@HOST:PORT/railway")
    print()
    
    railway_url = input("Collez DATABASE_URL de Railway : ").strip()
    
    if not railway_url:
        print("‚ùå URL vide. Migration annul√©e.")
        return
    
    print(f"\nüîó URL Railway : {railway_url[:30]}...")
    confirm = input("\n‚úÖ Confirmer l'import ? (oui/non) : ").strip().lower()
    
    if confirm not in ['oui', 'yes', 'o', 'y']:
        print("‚ùå Migration annul√©e")
        return
    
    if import_to_railway(railway_url):
        print("\n" + "="*60)
        print("üéâ MIGRATION TERMIN√âE AVEC SUCC√àS !")
        print("="*60)
        print("\nüìä Prochaines √©tapes :")
        print("   1. Railway va red√©ployer automatiquement")
        print("   2. Attendez 2-3 minutes")
        print("   3. Testez votre app : elle aura acc√®s aux immeubles !")
        print(f"\nüåê URL : https://web-production-fe0aa.up.railway.app")
    else:
        print("\n‚ö†Ô∏è Certaines donn√©es n'ont pas √©t√© import√©es")
        print("Consultez les erreurs ci-dessus pour plus de d√©tails")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚ùå Migration interrompue par l'utilisateur")
    except Exception as e:
        print(f"\n‚ùå Erreur inattendue : {e}")
        import traceback
        traceback.print_exc()
    
    input("\n\nAppuyez sur ENTR√âE pour fermer...")

